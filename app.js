document.addEventListener('DOMContentLoaded', () => {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    try {
        ThemeManager.init();
        GroupManager.init();
        ScheduleManager.init();
        console.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        UI.showError('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    }
});

const ThemeManager = {
    STORAGE_KEY: 'dstu_theme',
    
    init() {
        try {
            const savedTheme = localStorage.getItem(this.STORAGE_KEY) || 
                              (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
            this.setTheme(savedTheme);
            document.getElementById('themeToggle').addEventListener('change', (e) => 
                this.setTheme(e.target.checked ? 'dark' : 'light')
            );
            console.log('–¢–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', savedTheme);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–º—ã:', error);
        }
    },

    setTheme(theme, save = true) {
        document.documentElement.setAttribute('data-theme', theme);
        document.getElementById('themeToggle').checked = theme === 'dark';
        if (save) {
            localStorage.setItem(this.STORAGE_KEY, theme);
            console.log('–¢–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', theme);
        }
    }
};

const GroupManager = {
    groups: [],
    
    async init() {
        try {
            UI.toggleLoading(true);
            this.groups = await this.fetchGroups();
            this.populateSelect();
            this.setupSearch();
            console.log('–ì—Ä—É–ø–ø—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', this.groups.length);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø:', error);
            UI.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø');
        } finally {
            UI.toggleLoading(false);
        }
    },

    async fetchGroups() {
        const response = await fetch('https://edu.donstu.ru/api/raspGrouplist');
        if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
        
        const data = await response.json();
        console.log('–û—Ç–≤–µ—Ç API –≥—Ä—É–ø–ø:', data);
        
        if (!data?.data) throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö');
        return data.data.filter(g => g.id && g.name);
    },

    populateSelect() {
        const select = document.getElementById('groupSelect');
        select.innerHTML = this.groups
            .sort((a, b) => a.name.localeCompare(b.name))
            .map(g => `<option value="${g.id}">${g.name} (${g.facul})</option>`)
            .join('');
        console.log('–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –æ–±–Ω–æ–≤–ª–µ–Ω');
    },

    setupSearch() {
        document.getElementById('searchInput').addEventListener('input', (e) => {
            const term = e.target.value.toLowerCase();
            const filtered = this.groups.filter(g => 
                g.name.toLowerCase().includes(term) || 
                g.facul.toLowerCase().includes(term)
            );
            this.groups = filtered;
            this.populateSelect();
            console.log('–ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω:', term);
        });
    }
};

const ScheduleManager = {
    async loadSchedule() {
        try {
            const groupId = document.getElementById('groupSelect').value;
            const date = document.getElementById('datePicker').value;
            
            if (!groupId || !date) {
                throw new Error('–ù–µ –≤—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ –∏–ª–∏ –¥–∞—Ç–∞');
            }

            UI.toggleLoading(true);
            const lessons = await this.fetchSchedule(groupId, date);
            this.renderSchedule(lessons);
            console.log('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', lessons);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error);
            UI.showError(error.message);
        } finally {
            UI.toggleLoading(false);
        }
    },

    async fetchSchedule(groupId, date) {
        const apiUrl = `https://edu.donstu.ru/api/Rasp?idGroup=${groupId}&date=${date}`;
        console.log('–ó–∞–ø—Ä–æ—Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', apiUrl);
        
        const response = await fetch(apiUrl);
        if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
        
        const data = await response.json();
        console.log('–û—Ç–≤–µ—Ç API —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', data);
        
        if (data.state !== 1) throw new Error(data.msg || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        if (!data.data?.rasp?.length) throw new Error('–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É');
        
        return data.data.rasp.map(lesson => ({
            time: lesson.time || '‚Äî',
            discipline: lesson.discipline || '‚Äî',
            auditory: lesson.auditory || '‚Äî',
            lecturer: lesson.lecturer || '‚Äî',
            weekType: lesson.typeWeek?.shortName || '‚Äî'
        }));
    },

    renderSchedule(lessons) {
        const container = document.getElementById('schedule');
        container.innerHTML = lessons.length ? 
            this.generateTable(lessons) : 
            '<div class="info-message">üéâ –°–≤–æ–±–æ–¥–Ω—ã–π –¥–µ–Ω—å!</div>';
        console.log('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω–æ');
    },

    generateTable(lessons) {
        return `
            <table class="schedule-table">
                <thead>
                    <tr>
                        ${['–í—Ä–µ–º—è', '–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞', '–ê—É–¥–∏—Ç–æ—Ä–∏—è', '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', '–ù–µ–¥–µ–ª—è']
                            .map(h => `<th>${h}</th>`).join('')}
                    </tr>
                </thead>
                <tbody>
                    ${lessons.map(lesson => `
                        <tr>
                            <td>${lesson.time}</td>
                            <td>${lesson.discipline}</td>
                            <td class="auditory-cell">
                                <span class="auditory">
                                    <i class="fas fa-door-open"></i>
                                    ${lesson.auditory}
                                </span>
                            </td>
                            <td>${lesson.lecturer}</td>
                            <td>${lesson.weekType}</td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        `;
    }
};

const UI = {
    showError(message) {
        const errorDiv = document.getElementById('error');
        errorDiv.innerHTML = `‚ö†Ô∏è ${message}`;
        errorDiv.style.display = 'block';
        setTimeout(() => errorDiv.style.display = 'none', 5000);
    },

    toggleLoading(show) {
        document.getElementById('loading').style.display = show ? 'flex' : 'none';
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
document.getElementById('viewScheduleButton').addEventListener('click', () => ScheduleManager.loadSchedule());
document.getElementById('datePicker').value = new Date().toISOString().split('T')[0];

// –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ API
// ScheduleManager.loadSchedule = async () => {
//     ScheduleManager.renderSchedule([{
//         time: "09:00-10:30",
//         discipline: "–¢–µ—Å—Ç–æ–≤–∞—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞",
//         auditory: "101",
//         lecturer: "–ò–≤–∞–Ω–æ–≤ –ò.–ò.",
//         weekType: "–í"
//     }]);
// };
